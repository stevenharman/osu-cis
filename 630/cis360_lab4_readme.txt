The object of this lab is to first get several character strings from a user, put them into an array, sort that array with an implementation the QuickSort algorithm, and print out the sorted array.  To accomplish this I first prompt the user to input up to 30 lines with no more than 19* characters per line. (* I chose 19 becase my initial interpretation of the requirements of the lab was that a total of 20 chars per line were allowed, which means 19 characters from the user , PLUS the '\n' character for a total of 20 chars). As the lines are input I check them for the '\n' char which signifies the end of a line, and put all non-'\n' chars into an array.  If a '\n' is found, it is replaced with a NUL char in the array, to signify the end of a C string.  If a '\n' char is the first char of a line the user is done inputting lines, so it is replaced with a NUL char.  Next I move to "sort" the array.  To sort the array I actually put the address of all of the inputted lines (except for the line with only a '\n' char in it) into another array and then sort that with the QuickSort algorithm we were given.  To do this I wrote a qksrt(int a, int start, int end) subroutine which calls a Partition subroutine and then recursively calls it self twice.  The prttn(int a, int start, int end) subroutine simply goes through the array of addresses of strings and sorts them according the strings held at those addresses.  Partition relies on another subroutine strcmp(int str1, int str2) which compares two strings and returns an int to signify which of the strings comes before the other (according the ASCII values of their characters).  Once the sorting is done, I call a printarray(int a) subroutine which takes in the address of an array, who's elements are addresses of strings, and prints out those strings.
